/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '2-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.69.6'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'

gradlePlugin {
    plugins {
        'name.remal.classes-relocation' {
            id = 'name.remal.classes-relocation'
            implementationClass = 'name.remal.gradle_plugins.classes_relocation.ClassesRelocationPlugin'
            displayName = 'Classes relocation'
            description = property('repository-description')
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Project relocatorProject = project(':relocator')
project.fatJarWith(relocatorProject)

project.pluginManager.withPlugin('java') {
    relocatorProject.pluginManager.withPlugin('java') {
        ; ['runtimeOnly', 'implementation', 'api'].forEach { confName ->
            project.configurations.matching { it.name == confName }.all { Configuration conf ->
                relocatorProject.configurations.matching { it.name == confName }.all { Configuration relocatorConf ->
                    relocatorConf.dependencies.all { Dependency dep ->
                        conf.dependencies.add(dep.copy())
                    }
                }
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

SourceSet functionalTestSourceSet = testSourceSets.getByName('functionalTest')

Map<String, String> functionalTestRelocationNotations = [
    'guava': 'com.google.guava:guava',

    'junit-jupiter-api': 'org.junit.jupiter:junit-jupiter-api',
    'junit-jupiter-engine': 'org.junit.jupiter:junit-jupiter-engine',
    'junit-platform-launcher': 'org.junit.platform:junit-platform-launcher',
]

tasks.named(functionalTestSourceSet.name, Test) {
    inputs.property('functionalTestRelocationNotations', functionalTestRelocationNotations)

    onlyIf {
        functionalTestRelocationNotations.forEach { library, notation ->
            Closure<ResolvedDependency> getResolvedDependencyFrom = { String confName ->
                Configuration conf = configurations[confName]
                return conf.resolvedConfiguration
                    .getFirstLevelModuleDependencies()
                    .find { "${it.moduleGroup}:${it.moduleName}" == notation }
            }

            ResolvedDependency resolvedDep = getResolvedDependencyFrom(functionalTestSourceSet.compileClasspathConfigurationName)
                ?: getResolvedDependencyFrom(functionalTestSourceSet.runtimeClasspathConfigurationName)
            if (resolvedDep == null) {
                throw new GradleException("Resolved dependency with notation `$notation` can't be found in $conf")
            }
            Collection<File> files = resolvedDep.allModuleArtifacts.collect { it.file }
            systemProperty("$library-classpath", files.join(File.pathSeparator))
        }

        return true
    }
}
