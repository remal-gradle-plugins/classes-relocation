import static java.nio.charset.StandardCharsets.UTF_8

import java.lang.reflect.Field
import java.nio.file.Files
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.commons.ClassRemapper
import org.objectweb.asm.commons.Remapper
import org.objectweb.asm.tree.ClassNode

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '2-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.75.3'

        classpath platform("org.ow2.asm:asm-bom:9.9")
        classpath 'org.ow2.asm:asm-tree'
        classpath 'org.ow2.asm:asm-commons'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'

gradlePlugin {
    plugins {
        'name.remal.classes-relocation' {
            id = 'name.remal.classes-relocation'
            implementationClass = 'name.remal.gradle_plugins.classes_relocation.ClassesRelocationPlugin'
            displayName = 'Classes relocation'
            description = property('repository-description')
        }
    }
}

buildTimeConstants {
    property('graalvm-reachability-metadata.version', providers.gradleProperty('graalvm-reachability-metadata.version'))
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Project relocatorProject = project(':relocator')
project.fatJarWith(relocatorProject)

project.pluginManager.withPlugin('java') {
    relocatorProject.pluginManager.withPlugin('java') {
        ; ['classesRelocation', 'runtimeOnly', 'implementation', 'api'].forEach { confName ->
            project.configurations.matching { it.name == confName }.all { Configuration conf ->
                relocatorProject.configurations.matching { it.name == confName }.all { Configuration relocatorConf ->
                    relocatorConf.dependencies.all { Dependency dep ->
                        conf.dependencies.add(dep.copy())
                    }
                }
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dependencies {
    functionalTestAdditionalClasspath 'name.remal.gradle-plugins.test-source-sets:test-source-sets:5.0.3'
}

Map<String, String> functionalTestRelocationNotations = [
    'guava': 'com.google.guava:guava',
    'test-source-sets': 'name.remal.gradle-plugins.test-source-sets:test-source-sets',

    'junit-jupiter-api': 'org.junit.jupiter:junit-jupiter-api',
    'junit-jupiter-engine': 'org.junit.jupiter:junit-jupiter-engine',
    'junit-platform-launcher': 'org.junit.platform:junit-platform-launcher',
]

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    Attribute<String> artifactType = Attribute.of('artifactType', String)
    Attribute<Boolean> unprocessedHashMap = Attribute.of('unprocessedHashMap', Boolean)
    dependencies {
        attributesSchema {
            attribute(unprocessedHashMap)
        }
        artifactTypes.getByName('jar') {
            attributes.attribute(unprocessedHashMap, false)
        }
    }

    configurations.all { Configuration conf ->
        if (conf.state != Configuration.State.UNRESOLVED
            || !conf.canBeResolved
        ) {
            return
        }

        Closure<Boolean> shouldProcessHashMap = { String notation ->
            return notation == 'org.json:json'
        }

        conf.resolutionStrategy.dependencySubstitution { DependencySubstitutions substitutions ->
            substitutions.all { DependencySubstitution substitution ->
                if (!(substitution.requested instanceof ModuleComponentSelector)) {
                    return
                }

                ModuleComponentSelector requested = (ModuleComponentSelector) substitution.requested
                if (shouldProcessHashMap("${requested.group}:${requested.module}")) {
                    ComponentSelector target = substitutions.variant(requested) { VariantSelectionDetails details ->
                        details.attributes {
                            attribute(unprocessedHashMap, true)
                        }
                    }
                    substitution.useTarget(target)
                }
            }
        }
    }

    dependencies {
        registerTransform(ProcessHashMap) {
            from.attribute(unprocessedHashMap, false).attribute(artifactType, 'jar')
            to.attribute(unprocessedHashMap, true).attribute(artifactType, 'jar')
        }
    }
}

abstract class ProcessHashMap implements TransformAction<ProcessHashMapParameters> {

    interface ProcessHashMapParameters extends TransformParameters {}

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact()

    @Override
    void transform(TransformOutputs outputs) {
        File file = inputArtifact.get().asFile
        File outputFile = outputs.file(file.name)
        if (outputFile.exists() && outputFile.lastModified() >= rootProject.buildFile.lastModified()) {
            return
        }

        int asmApi = new ClassNode().api

        Files.createDirectories(outputFile.parentFile.toPath())
        new ZipInputStream(new FileInputStream(file), UTF_8).withCloseable { ZipInputStream inputStream ->
            new ZipOutputStream(new FileOutputStream(outputFile), UTF_8).withCloseable { ZipOutputStream outputStream ->
                while (true) {
                    ZipEntry zipEntry = inputStream.nextEntry
                    if (zipEntry == null) {
                        break
                    }

                    if (zipEntry.directory) {
                        continue
                    }

                    outputStream.putNextEntry(zipEntry)

                    if (!zipEntry.name.endsWith('.class')) {
                        outputStream << inputStream
                        continue
                    }

                    ClassVisitor classVisitor
                    ClassWriter classWriter = classVisitor = new ClassWriter(0)

                    Remapper remapper = new Remapper(asmApi) {
                        @Override
                        String map(String internalName) {
                            if (internalName == 'java/util/HashMap') {
                                return 'java/util/LinkedHashMap'
                            }

                            return internalName
                        }
                    }
                    classVisitor = new ClassRemapper(classVisitor, remapper)

                    new ClassReader(inputStream).accept(classVisitor, 0)

                    outputStream << classWriter.toByteArray()
                }
            }
        }
    }

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

TaskProvider<Jar> jarTaskProvider = tasks.named('jar', Jar)
RegularFileProperty jarFileProperty = objects.fileProperty().value(jarTaskProvider.flatMap { jar.archiveFile })

tasks.named('processReadme') { dependsOn(jarTaskProvider) }

project.ext.keepAnnotationInclusionsDefault = objects.listProperty(String).value(provider {
    File jarFile = jarFileProperty.get().asFile
    new URLClassLoader(new URL[]{jarFile.toURI().toURL()}, (ClassLoader) null).withCloseable { classLoader ->
        Class<?> clazz = classLoader.loadClass('name.remal.gradle_plugins.classes_relocation.relocator.minimization.MinimizationConfigDefaults')
        Field field = clazz.getField('KEEP_ANNOTATION_INCLUSIONS_DEFAULT')
        return field.get(null)
    }
})
