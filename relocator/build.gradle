import java.nio.file.Files
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.commons.ClassRemapper
import org.objectweb.asm.commons.Remapper
import org.objectweb.asm.tree.ClassNode

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath platform("org.ow2.asm:asm-bom:9.8")
        classpath 'org.ow2.asm:asm-tree'
        classpath 'org.ow2.asm:asm-commons'
    }
    repositories {
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-library'
apply plugin: 'name.remal.build-time-constants'

dependencies {
    optional 'name.remal.gradle-api:gradle-api'

    classesRelocation 'org.apache.commons:commons-compress:1.28.0'
    classesRelocation 'org.json:json:20250517'

    compileOnly 'org.apiguardian:apiguardian-api:1.1.2'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.4'

    optional 'org.ow2.asm:asm-util'

    implementation 'org.ow2.asm:asm'
    implementation 'org.ow2.asm:asm-tree'
    implementation 'org.ow2.asm:asm-commons'


    testImplementation 'com.google.jimfs:jimfs:1.3.1'
    testImplementation 'org.apache.commons:commons-compress:1.28.0'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

repositories {
    ivy {
        name = 'graalvmReachabilityMetadataTest'
        url = 'https://github.com'
        patternLayout {
            artifact('[organisation]/[module]/releases/download/[revision]/[artifact]-[revision].[ext]')
        }
        metadataSources {
            artifact()
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

SourceSet componentTestSourceSet = testSourceSets.create('componentTest')

dependencies {
    componentTestImplementation "oracle:graalvm-reachability-metadata:${property('graalvm-reachability-metadata.version')}@zip"

    componentTestImplementation platform('com.fasterxml.jackson:jackson-bom:2.19.2')
    componentTestImplementation 'com.fasterxml.jackson.core:jackson-databind'
    componentTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
    componentTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    componentTestImplementation 'joda-time:joda-time:2.14.0'
    componentTestImplementation 'net.sf.saxon:Saxon-HE:12.8'
    componentTestImplementation 'io.github.classgraph:classgraph:4.8.181'
}

if (!tasks.names.contains(componentTestSourceSet.jarTaskName)) {
    tasks.register(componentTestSourceSet.jarTaskName, Jar) { jar ->
        jar.description = "Assembles a jar archive containing the classes of the '${componentTestSourceSet.name}' feature."
        jar.group = 'build'
        jar.from(componentTestSourceSet.output)
        jar.archiveClassifier = componentTestSourceSet.name
    }
}

tasks.named(componentTestSourceSet.name, Test) {
    TaskProvider componentTestJar = tasks.named(componentTestSourceSet.jarTaskName, Jar)
    dependsOn(componentTestJar)
    inputs.file(componentTestJar.flatMap { it.archiveFile })

    onlyIf {
        systemProperty("test-classes-jar", componentTestJar.get().archiveFile.get().asFile.absolutePath)
        return true
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Provider<Directory> extractedAnnotationClassesDirectory = layout.buildDirectory.dir("extracted-annotations")

TaskProvider extractAnnotationClasses = tasks.register('extractAnnotationClasses') {
    dependsOn('compileJava')

    ConfigurableFileCollection classpath = files(
        sourceSets.main.output.classesDirs,
        configurations.compileClasspath,
    )
    inputs.files(classpath).withPropertyName('classpath').withNormalizer(ClasspathNormalizer)
    dependsOn(classpath)

    outputs.dir(extractedAnnotationClassesDirectory)

    doLast {
        File outputDir = extractedAnnotationClassesDirectory.get().asFile
        outputDir.deleteDir()
        outputDir.mkdirs()

        Collection<URL> classpathUrls = classpath.files.collect { it.toURI().toURL() }
        new URLClassLoader(classpathUrls.toArray(new URL[0]), (ClassLoader) null).withCloseable { classLoader ->
            Deque<String> internalClassNamesQueue = new ArrayDeque<>([
                'name.remal.gradle_plugins.classes_relocation.relocator.asm.Generated',
                'name.remal.gradle_plugins.classes_relocation.relocator.asm.RelocatedClass',
                'org.jetbrains.annotations.ApiStatus$Internal',
                'org.apiguardian.api.API',
                'edu.umd.cs.findbugs.annotations.SuppressFBWarnings',
            ].collect { it.replace('.', '/') })
            Set<String> extractedInternalClassNames = new LinkedHashSet<>(internalClassNamesQueue)

            while (true) {
                String internalClassName = internalClassNamesQueue.pollFirst()
                if (internalClassName == null) {
                    break
                }

                logger.info('Processing {}', internalClassName)

                String classResourceName = internalClassName + '.class'
                InputStream classInputStream = classLoader.getResourceAsStream(classResourceName)
                if (classInputStream == null) {
                    throw new GradleException("Class resource can't be found: $classResourceName")
                }
                classInputStream.withCloseable { inputStream ->
                    ClassNode classNode = new ClassNode()

                    Remapper remapper = new Remapper() {
                        @Override
                        String map(String internalName) {
                            if (internalName.startsWith('java/')) {
                                return super.map(internalName)
                            }

                            if (extractedInternalClassNames.add(internalName)) {
                                internalClassNamesQueue.addLast(internalName)
                            }

                            return super.map(internalName)
                        }
                    }
                    ClassRemapper classRemapper = new ClassRemapper(classNode, remapper)
                    new ClassReader(inputStream).accept(classRemapper, 0)

                    ClassWriter classWriter = new ClassWriter(0)
                    classNode.accept(classWriter)
                    byte[] bytes = classWriter.toByteArray()

                    File outputFile = new File(outputDir, classResourceName)
                    outputFile.parentFile.mkdirs()
                    Files.write(outputFile.toPath(), bytes)
                }
            }
        }
    }
}

Provider<Directory> archivedAnnotationClassesDirectory = layout.buildDirectory.dir("extracted-annotations-archived")

TaskProvider<Jar> archiveAnnotationClasses = tasks.register('archiveAnnotationClasses', Jar) {
    dependsOn(extractAnnotationClasses)

    destinationDirectory = archivedAnnotationClassesDirectory
    archiveBaseName = provider { "${project.rootProject.group}-annotations" }
    archiveVersion = provider { project.rootProject.version.toString() }

    from(extractedAnnotationClassesDirectory)
}

tasks.named('processResources', ProcessResources) {
    dependsOn(archiveAnnotationClasses)
    from(archivedAnnotationClassesDirectory)
}
