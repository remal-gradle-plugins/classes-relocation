import static java.util.stream.Collectors.toList

apply plugin: 'java-library'
apply plugin: 'name.remal.build-time-constants'

dependencies {
    optional 'name.remal.gradle-api:gradle-api'

    classesRelocation 'org.apache.commons:commons-compress:1.27.1'
    classesRelocation 'org.json:json:20250107'

    compileOnly 'org.apiguardian:apiguardian-api:1.1.2'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.0'

    optional 'org.ow2.asm:asm-util'

    implementation 'org.ow2.asm:asm'
    implementation 'org.ow2.asm:asm-tree'
    implementation 'org.ow2.asm:asm-commons'


    testImplementation 'com.google.jimfs:jimfs:1.3.0'
    testImplementation 'org.apache.commons:commons-compress:1.27.1'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

repositories {
    ivy {
        name = 'graalvmReachabilityMetadataTest'
        url = 'https://github.com'
        patternLayout {
            artifact('[organisation]/[module]/releases/download/[revision]/[artifact]-[revision].[ext]')
        }
        metadataSources {
            artifact()
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

SourceSet componentTestSourceSet = testSourceSets.create('componentTest')

dependencies {
    componentTestImplementation "oracle:graalvm-reachability-metadata:${property('graalvm-reachability-metadata.version')}@zip"

    componentTestImplementation platform('com.fasterxml.jackson:jackson-bom:2.18.2')
    componentTestImplementation 'com.fasterxml.jackson.core:jackson-databind'
    componentTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
    componentTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    componentTestImplementation 'joda-time:joda-time:2.13.1'
    componentTestImplementation 'net.sf.saxon:Saxon-HE:12.5'
    componentTestImplementation 'io.github.classgraph:classgraph:4.8.179'
}

Map<String, String> componentTestRelocationNotations = [
    'graalvm-reachability-metadata': 'oracle:graalvm-reachability-metadata',

    'guava': 'com.google.guava:guava',
    'jackson-databind': 'com.fasterxml.jackson.core:jackson-databind',
    'jackson-guava': 'com.fasterxml.jackson.datatype:jackson-datatype-guava',
    'jackson-jsr310': 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',
    'joda-time': 'joda-time:joda-time',
    'saxon': 'net.sf.saxon:Saxon-HE',
    'classgraph': 'io.github.classgraph:classgraph',

    'junit-jupiter-api': 'org.junit.jupiter:junit-jupiter-api',
    'assertj-core': 'org.assertj:assertj-core',
    'asm': 'org.ow2.asm:asm',
]

if (!tasks.names.contains(componentTestSourceSet.jarTaskName)) {
    tasks.register(componentTestSourceSet.jarTaskName, Jar) { jar ->
        jar.description = "Assembles a jar archive containing the classes of the '${componentTestSourceSet.name}' feature."
        jar.group = 'build'
        jar.from(componentTestSourceSet.output)
        jar.archiveClassifier = componentTestSourceSet.name
    }
}

tasks.named(componentTestSourceSet.name, Test) {
    inputs.property('componentTestRelocationNotations', componentTestRelocationNotations)

    TaskProvider componentTestJar = tasks.named(componentTestSourceSet.jarTaskName, Jar)
    dependsOn(componentTestJar)
    inputs.file(componentTestJar.flatMap { it.archiveFile })

    onlyIf {
        systemProperty("test-classes-jar", componentTestJar.get().archiveFile.get().asFile.absolutePath)

        componentTestRelocationNotations.forEach { library, notation ->
            Closure<List<ResolvedDependency>> getResolvedDependenciesFrom = { String confName ->
                Configuration conf = configurations[confName]
                return conf.resolvedConfiguration
                    .firstLevelModuleDependencies
                    .findAll { "${it.moduleGroup}:${it.moduleName}" == notation }
                    .toList()
            }

            List<ResolvedDependency> resolvedDeps = getResolvedDependenciesFrom(componentTestSourceSet.compileClasspathConfigurationName)
            if (resolvedDeps.isEmpty()) {
                resolvedDeps = getResolvedDependenciesFrom(componentTestSourceSet.runtimeClasspathConfigurationName)
            }
            if (resolvedDeps.isEmpty()) {
                throw new GradleException("Resolved dependencies with notation `$notation` can't be found in `${componentTestSourceSet.name}` dependencies")
            }
            Collection<File> files = resolvedDeps.stream()
                .flatMap { dep -> dep.allModuleArtifacts.stream() }
                .map { artifact -> artifact.file }
                .distinct()
                .collect(toList())
            systemProperty("$library-classpath", files.join(File.pathSeparator))
        }

        return true
    }
}
